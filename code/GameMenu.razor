@using System
@using Sandbox;
@using Sandbox.MenuSystem;
@using Sandbox.UI;
@using System.Threading.Tasks;
@inherits RootPanel
@implements Sandbox.Menu.IGameMenuPanel

<root>

    Hello there idiots!

</root>

@code
{
    Angles viewAngles;

    public GameMenu()
    {
        var scene = new Scene();
        Scene.Active = scene;

        Scene.Active.SceneWorld = new SceneWorld();
        Scene.Active.PhysicsWorld = new PhysicsWorld();

        //  Camera.Main = new Camera();
        Camera.Main.World = Scene.Active.SceneWorld;
        Camera.Main.Position = 0;
        Camera.Main.ZNear = 1;
        Camera.Main.Tonemap.Enabled = true;
        Camera.Main.Tonemap.MinExposure = 0.1f;
        Camera.Main.Tonemap.MaxExposure = 2.0f;
        Camera.Main.Tonemap.Rate = 1.0f;
        Camera.Main.Tonemap.Fade = 1.0f;

        //  var sun = new SceneSunLight(world, Rotation.FromPitch(50), Color.White * 2.5f + Color.Cyan * 0.05f);
        //  sun.ShadowsEnabled = true;
        // sun.SkyColor = Color.White * 0.5f + Color.Cyan * 0.025f;
        // sun.ShadowTextureResolution = 1024;

        Log.Info($"Loaded {Camera.Main} {Camera.Main.World}");

        _ = LoadMapAsync();
    }

    async Task LoadMapAsync()
    {
        var package = await Package.Fetch( "https://asset.party/facepunch/datacore", false) ;

        await package.MountAsync();

        var map = new Map( "maps/datacore", new SceneMapLoader(Scene.Active.SceneWorld, Scene.Active.PhysicsWorld) );


        Scene.Active.NavigationMesh = new NavigationMesh();

        //  Scene.Active.NavigationMesh.Load( "maps/datacore.nav");

        //new SceneMap( world, "maps/scenemaps/menu_avatar/avatar_menu_map" );

        //  for (int i = 0; i < 10000; i++)
        //  {
        //      var model = new SceneModel(Scene.Active.SceneWorld, "models/rust_props/small_junk/apple.vmdl", Transform.Zero);
        //      model.Position = Vector3.Up * 500 + (Vector3.Random * 2000);
        // }
    }

    public override bool WantsMouseInput() => false;

    Vector3 velocity;
    Vector3 velocityDamp;

    public override void Tick()
    {
        base.Tick();

        Scene.Active.Tick();
        Scene.Active.PreRender();

        Vector3 move = 0;
        if (Input.Down("Forward")) move += Vector3.Forward;
        if (Input.Down("Backward")) move -= Vector3.Forward;
        if (Input.Down("Left")) move += Vector3.Left;
        if (Input.Down("right")) move += Vector3.Right;

        var speed = 310;
        if (Input.Down("run")) speed = 5000;
        if ( Input.Pressed( "attack2") )
        {
            Scene.Active.NavigationMesh.Generate(Scene.Active.PhysicsWorld);
        }

        if ( Input.Pressed("attack1") )
        {
            // var model = new SceneModel(world, "models/rust_props/small_junk/apple.vmdl", Transform.Zero);
            //  model.Position = Camera.Main.Position + Camera.Main.Rotation.Forward * 40;

            var spawnTx = new Transform(Camera.Main.Position + Camera.Main.Rotation.Forward * 100);

            var prefab = ResourceLibrary.Get<Prefab>( "ball.prefab" );
            var instance = PrefabSystem.Spawn(prefab, spawnTx);

            var phys = instance.GetComponent<PhysicsComponent>();
            phys.Velocity = Camera.Main.Rotation.Forward * 1000;

            Log.Info( instance );
        }

        velocity += viewAngles.ToRotation() * move * RealTime.Delta * speed;
        velocity = velocity.ClampLength( 10000.0f );
        velocity = Vector3.SmoothDamp(velocity, 0, ref velocityDamp, 1.0f, RealTime.Delta);

        viewAngles += Input.AnalogLook;

        Camera.Main.Worlds.Add( Scene.Active.DebugSceneWorld);
        Camera.Main.Position +=  velocity * RealTime.Delta;
        Camera.Main.Rotation = viewAngles.ToRotation();
        Camera.Main.ZNear = 1;
        Camera.Main.ZFar = 50000;
        Camera.Main.FieldOfView = 90;

        
    }
}
