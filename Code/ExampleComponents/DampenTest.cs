using Sandbox;

#nullable enable

public sealed class DampenTest : Component
{
	[Property]
	public GameObject? Target { get; set; }

	[Property]
	public TextRenderer? Text { get; set; }

	[Property]
	public float UpdateRate { get; set; } = 60f;

	private Vector3.SpringDamped _spring;

	private float _time;

	protected override void OnStart()
	{
		Reset();
	}

	public void Reset()
	{
		_spring = new( 0f, 0f, 5f, Damping: 0.125f );
	}

	public void SetVelocity( Vector3 velocity )
	{
		Reset();
		_spring.Velocity = velocity;
	}

	protected override void OnUpdate()
	{
		_time += Time.Delta;

		if ( Text is { } text )
		{
			text.Text = $"{UpdateRate} Hz";
		}

		var dt = 1f / UpdateRate;

		if ( dt <= 0f ) return;

		while ( _time > dt )
		{
			_time -= dt;
			_spring.Update( dt );
		}

		if ( Target is { } target )
		{
			target.LocalPosition = _spring.Current + Vector3.Up * 100f;
			target.LocalRotation = Rotation.LookAt( target.LocalPosition, Vector3.Forward );
		}
	}
}

public sealed class DampenTestManager : Component
{
	[Property, InputAction]
	public string? KickAction { get; set; }

	protected override void OnUpdate()
	{
		if ( Input.Pressed( KickAction ) )
		{
			var velocity = Random.Shared.VectorInSphere( 1024f );

			foreach ( var test in Scene.GetAllComponents<DampenTest>() )
			{
				test.SetVelocity( velocity );
			}
		}
	}
}
