@using Sandbox;
@using Sandbox.UI;
@using Reclaimer;
@inherits PanelComponent

<root>
    <div class="simple-hud">
        
        @* Class-specific status extension *@
        @if (GetClassStatus() != "")
        {
            <div class="class-status @GetClassType().ToLower()">
                @GetClassStatus()
            </div>
        }
        
        @* Base abilities - always shown *@
        <div class="abilities">
            <div class="ability @GetAbilityClass("ability1")">
                <div class="key">@GetAbility1Key()</div>
                <div class="cooldown">@GetAbility1Cooldown()</div>
            </div>
            
            <div class="ability @GetAbilityClass("ability2")">
                <div class="key">@GetAbility2Key()</div>
                <div class="cooldown">@GetAbility2Cooldown()</div>
            </div>
            
            <div class="ability @GetAbilityClass("ultimate")">
                <div class="key">@GetUltimateKey()</div>
                <div class="cooldown">@GetUltimateCooldown()</div>
            </div>
        </div>
        
        @* Base vitals - always shown *@
        <div class="vitals">
            <div class="health">
                <div class="icon">@GetHealthIcon()</div>
                <div class="value">@GetHealth()</div>
            </div>
            
            <div class="mana">
                <div class="icon">@GetManaIcon()</div>
                <div class="value">@GetMana()</div>
            </div>
            
            <div class="resource">
                <div class="icon">@GetResourceIcon()</div>
                <div class="value">@GetResource()</div>
            </div>
        </div>
        
    </div>
</root>

@code {
    
    protected override void OnStart()
    {
        Log.Info($"SimpleGameHUD created for class: {GetClassType()}");
    }
    
    protected override void OnUpdate()
    {
        // StateHasChanged is called automatically by BuildHash changes
    }
    
    TrinityPlayer GetPlayer()
    {
        return Scene?.GetAllComponents<TrinityPlayer>()
            ?.Where(p => !p.IsProxy)
            ?.FirstOrDefault();
    }
    
    string GetPlayerType()
    {
        var player = GetPlayer();
        return player?.ClassType.ToString() ?? "None";
    }
    
    string GetHealth()
    {
        var player = GetPlayer();
        return player != null ? $"{player.CurrentHealth:F0}/{player.MaxHealth:F0}" : "0/0";
    }
    
    string GetMana()
    {
        var player = GetPlayer();
        return player != null ? $"{player.CurrentMana:F0}/{player.MaxMana:F0}" : "0/0";
    }
    
    string GetResource()
    {
        var player = GetPlayer();
        return player != null ? $"{player.CurrentResource:F0}/{player.MaxResource:F0}" : "0/0";
    }
    
    string GetClassType()
    {
        var player = GetPlayer();
        return player?.ClassType.ToString() ?? "None";
    }
    
    // Class-extensible ability key display
    string GetAbility1Key()
    {
        var player = GetPlayer();
        return player switch
        {
            AbbyHealer => "üî´", // Cork Revolver icon
            LeoTank => "‚öîÔ∏è", // Sword attack icon
            // TrunkWarrior => "üêò", // Trunk attack icon
            _ => "LMB"
        };
    }
    
    string GetAbility2Key()
    {
        var player = GetPlayer();
        return player switch
        {
            AbbyHealer => "ü•õ", // Milk spray icon
            LeoTank => "üõ°Ô∏è", // Shell defense icon
            // TrunkWarrior => "üí™", // Trunk grab icon
            _ => "RMB"
        };
    }
    
    string GetUltimateKey()
    {
        var player = GetPlayer();
        return player switch
        {
            AbbyHealer => "üò≠", // Divine spill icon
            LeoTank => "üë∂", // Lil Frank icon
            // TrunkWarrior => "üåü", // Transcendent trunk icon
            _ => "MMB"
        };
    }
    
    // Class-extensible icon display
    string GetHealthIcon()
    {
        var player = GetPlayer();
        return player switch
        {
            AbbyHealer => "‚ù§Ô∏è", // Heart for healer
            LeoTank => "üõ°Ô∏è", // Shield for tank
            // TrunkWarrior => "üí™", // Muscle for DPS
            _ => "favorite"
        };
    }
    
    string GetManaIcon()
    {
        var player = GetPlayer();
        return player switch
        {
            AbbyHealer => "üíß", // Water drop for healing mana
            LeoTank => "‚ö°", // Lightning for tank abilities
            // TrunkWarrior => "üî•", // Fire for DPS rage
            _ => "bolt"
        };
    }
    
    string GetResourceIcon()
    {
        var player = GetPlayer();
        return player switch
        {
            AbbyHealer => "ü•õ", // Milk icon
            LeoTank => "üî•", // Rage icon
            // TrunkWarrior => "üìè", // Trunk length icon
            _ => "star"
        };
    }
    
    string GetAbility1Cooldown()
    {
        var player = GetPlayer();
        if (player == null) return "";
        return player.Ability1Cooldown > 0 ? $"{player.Ability1Cooldown:F1}" : "";
    }
    
    string GetAbility2Cooldown()
    {
        var player = GetPlayer();
        if (player == null) return "";
        return player.Ability2Cooldown > 0 ? $"{player.Ability2Cooldown:F1}" : "";
    }
    
    string GetUltimateCooldown()
    {
        var player = GetPlayer();
        if (player == null) return "";
        return player.UltimateCooldown > 0 ? $"{player.UltimateCooldown:F1}" : "";
    }
    
    string GetAbilityClass(string ability)
    {
        var player = GetPlayer();
        if (player == null) return "";
        
        bool onCooldown = ability switch
        {
            "ability1" => player.Ability1Cooldown > 0,
            "ability2" => player.Ability2Cooldown > 0,
            "ultimate" => player.UltimateCooldown > 0,
            _ => false
        };
        
        return onCooldown ? "on-cooldown" : "ready";
    }
    
    // CLASS-SPECIFIC STATUS EXTENSIONS - Easy to modify per class
    string GetClassStatus()
    {
        var player = GetPlayer();
        if (player == null) return "";
        
        return player switch
        {
            LeoTank leo => GetLeoStatus(leo),
            AbbyHealer abby => GetAbbyStatus(abby),
            // TrunkWarrior trunk => GetTrunkStatus(trunk),
            _ => ""
        };
    }
    
    string GetLeoStatus(LeoTank leo)
    {
        var status = new List<string>();
        
        // Show current stance
        if (leo.HeadRotated) 
            status.Add("üõ°Ô∏è DEFENSIVE");
        else 
            status.Add("‚öîÔ∏è BATTLE");
            
        if (leo.InShell) status.Add("üê¢ SHELL MODE");
        if (!leo.HasSword) status.Add("‚ùå NO SWORD");
        if (leo.LilFrankActive) status.Add("üë∂ LIL FRANK");
        
        var parryTime = leo.GetParryWindowRemaining();
        if (parryTime > 0) status.Add($"‚ú® PARRY {parryTime:F1}s");
        
        return string.Join(" ‚Ä¢ ", status);
    }
    
    string GetAbbyStatus(AbbyHealer abby)
    {
        var status = new List<string>();
        
        // Show cork ammo - this is what was missing!
        var corkRevolver = abby.Components.GetInDescendants<CorkRevolver>();
        if (corkRevolver != null)
        {
            string reloadStatus = corkRevolver.IsReloading ? " [RELOADING]" : "";
            status.Add($"üî´ {corkRevolver.CurrentAmmo}/{corkRevolver.MaxAmmo} CORKS{reloadStatus}");
        }
        else
        {
            status.Add("üî´ NO CORK REVOLVER");
        }
        
        // Show milk level with color coding
        var milkPercentage = abby.MaxMilk > 0 ? abby.CurrentMilk / abby.MaxMilk : 0;
        string milkColor = milkPercentage > 0.7f ? "üü¢" : milkPercentage > 0.3f ? "üü°" : "üî¥";
        status.Add($"{milkColor} {abby.CurrentMilk:F0}/{abby.MaxMilk:F0} MILK");
        
        // Show special states
        if (abby.IsCrying) status.Add("üò≠ CRYING");
        if (abby.IsInvincible) status.Add("‚ú® INVINCIBLE");
        if (abby.PremiumMilkActive) status.Add("‚≠ê PREMIUM");
        
        // Show milk spoilage timer
        if (abby.CurrentMilk > 0 && !abby.PremiumMilkActive && abby.MilkSpoilageTimer > 0)
        {
            string timerColor = abby.MilkSpoilageTimer < 10 ? "üî¥" : abby.MilkSpoilageTimer < 20 ? "üü°" : "üü¢";
            status.Add($"{timerColor} {abby.MilkSpoilageTimer:F0}s");
        }
        
        return string.Join(" ‚Ä¢ ", status);
    }
    
    // Easy to add new classes:
    // string GetTrunkStatus(TrunkWarrior trunk)
    // {
    //     var status = new List<string>();
    //     status.Add($"üìè TRUNK LV.{trunk.TrunkLevel} ({trunk.GetTrunkLength()}cm)");
    //     if (trunk.IsGrabbing) status.Add("ü§è GRABBING");
    //     return string.Join(" ‚Ä¢ ", status);
    // }
    
    protected override int BuildHash()
    {
        var player = GetPlayer();
        if (player == null) return 0;
        
        var hash = HashCode.Combine(
            player.CurrentHealth,
            player.CurrentMana,
            player.CurrentResource,
            player.Ability1Cooldown,
            player.Ability2Cooldown,
            player.UltimateCooldown,
            player.ClassType
        );
        
        // Add Leo-specific hash components
        if (player is LeoTank leo)
        {
            hash = HashCode.Combine(hash, leo.InShell, leo.HasSword, leo.LilFrankActive);
        }
        
        // Add Abby-specific hash components
        if (player is AbbyHealer abby)
        {
            var corkRevolver = abby.Components.GetInDescendants<CorkRevolver>();
            hash = HashCode.Combine(hash, 
                abby.CurrentMilk, 
                abby.MilkSpoilageTimer, 
                abby.IsCrying, 
                abby.IsInvincible,
                abby.PremiumMilkActive,
                corkRevolver?.CurrentAmmo ?? 0,
                corkRevolver?.IsReloading ?? false
            );
        }
        
        // Add TrunkWarrior-specific hash components
        // if (player is TrunkWarrior trunk)
        // {
        //     hash = HashCode.Combine(hash, trunk.TrunkLevel, trunk.IsGrabbing);
        // }
        
        return hash;
    }
    
}