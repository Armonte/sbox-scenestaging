@using Sandbox;
@using Sandbox.UI;
@using Reclaimer;
@using System.Threading.Tasks;
@inherits PanelComponent

<root class="class-selection-panel @(IsTransitioningOut ? "transitioning-out" : "")">
	<div class="header">
		<h1>Forge Your Destiny</h1>
		<p>Choose your path in the eternal struggle against The Reclaimer</p>
	</div>
	
	<div class="class-grid">
		<div class="class-card @(CanSelectClass(TrinityClassType.Tank) ? "" : "disabled")" 
			 @onclick="@(() => SelectClass(TrinityClassType.Tank))">
			<div class="class-icon">üê¢</div>
			<h3>Leo the Phranklyn</h3>
			<div class="class-role">TANK</div>
			<div class="class-description">
				@foreach(var item in GetTankFeatures())
				{
					<div class="feature">@item</div>
				}
			</div>
			<div class="spacer"></div>
			<div class="class-status">
				@if (SpawnManager?.TankCount >= 1)
				{
					<span class="full">Role Filled</span>
				}
				else
				{
					<span class="available">Available</span>
				}
			</div>
		</div>
		
		
		<div class="class-card @(CanSelectClass(TrinityClassType.Healer) ? "" : "disabled")"
			 @onclick="@(() => SelectClass(TrinityClassType.Healer))">
			<div class="class-icon">ü•õ</div>
			<h3>Holy Milker Abby</h3>
			<div class="class-role">HEALER</div>
			<div class="class-description">
				@foreach(var item in GetHealerFeatures())
				{
					<div class="feature">@item</div>
				}
			</div>
			<div class="spacer"></div>
			<div class="class-status">
				@if (SpawnManager?.HealerCount >= 2)
				{
					<span class="full">Role Filled</span>
				}
				else
				{
					<span class="available">@(2 - (SpawnManager?.HealerCount ?? 0)) Slots</span>
				}
			</div>
		</div>
		
		<div class="class-card @(CanSelectClass(TrinityClassType.DPS) ? "" : "disabled")"
			 @onclick="@(() => SelectClass(TrinityClassType.DPS))">
			<div class="class-icon">üêò</div>
			<h3>Mighty Trunk Warrior</h3>
			<div class="class-role">DPS</div>
			<div class="class-description">
				@foreach(var item in GetDPSFeatures())
				{
					<div class="feature">@item</div>
				}
			</div>
			<div class="spacer"></div>
			<div class="class-status">
				@if (SpawnManager?.DPSCount >= 2)
				{
					<span class="full">Role Filled</span>
				}
				else
				{
					<span class="available">@(2 - (SpawnManager?.DPSCount ?? 0)) Slots</span>
				}
			</div>
		</div>
	</div>
	
	<div class="party-status">
		<div class="status-header">
			<h3>The Chosen Champions</h3>
			<div class="status-divider"></div>
		</div>
		<div class="trinity-shrine">
			<div class="role-crystal tank @(SpawnManager?.TankCount > 0 ? "filled" : "")">
				<div class="crystal-glow"></div>
				<span class="role-icon">üõ°Ô∏è</span>
				<div class="role-info">
					<span class="role-name">Guardian</span>
				</div>
				<span class="count">@(SpawnManager?.TankCount ?? 0)/1</span>
			</div>
			<div class="trinity-connector"></div>
			<div class="role-crystal healer @(SpawnManager?.HealerCount > 0 ? "filled" : "")">
				<div class="crystal-glow"></div>
				<span class="role-icon">‚ú®</span>
				<div class="role-info">
					<span class="role-name">Life Bringer</span>
				</div>
				<span class="count">@(SpawnManager?.HealerCount ?? 0)/2</span>
			</div>
			<div class="trinity-connector"></div>
			<div class="role-crystal dps @(SpawnManager?.DPSCount > 0 ? "filled" : "")">
				<div class="crystal-glow"></div>
				<span class="role-icon">‚öîÔ∏è</span>
				<div class="role-info">
					<span class="role-name">Destroyer</span>
				</div>
				<span class="count">@(SpawnManager?.DPSCount ?? 0)/2</span>
			</div>
		</div>
		@if (SpawnManager?.IsPartyComplete() ?? false)
		{
			<div class="prophecy-fulfilled">‚ú¶ The Trinity is Complete ‚ú¶</div>
		}
	</div>
</root>

@code {
	TrinitySpawnManager SpawnManager => Scene?.GetAllComponents<TrinitySpawnManager>().FirstOrDefault();
	private ClassSelectionUI _selector;
	ClassSelectionUI Selector => _selector ?? Scene?.GetAllComponents<ClassSelectionUI>().FirstOrDefault();
	
	[Sync] public bool IsTransitioningOut { get; set; } = false;
	
	public void SetSelector(ClassSelectionUI selector)
	{
		_selector = selector;
		Log.Info($"ClassSelectionPanel selector set to: {selector != null}");
	}
	
	string[] GetTankFeatures()
	{
		return new string[]
		{
			"‚Ä¢ Shell parry system",
			"‚Ä¢ High survivability", 
			"‚Ä¢ Summons Lil Frank",
			"‚Ä¢ Lactose intolerant"
		};
	}
	
	string[] GetHealerFeatures()
	{
		return new string[]
		{
			"‚Ä¢ Dual gun system",
			"‚Ä¢ Milk resource management",
			"‚Ä¢ Divine Spill ultimate",
			"‚Ä¢ Portal teleportation"
		};
	}
	
	string[] GetDPSFeatures()
	{
		return new string[]
	{
			"‚Ä¢ 12-level trunk progression",
			"‚Ä¢ Combo system",
			"‚Ä¢ Reality-bending ultimates", 
			"‚Ä¢ Trunk pun obsession"
		};
	}
	
	bool CanSelectClass(TrinityClassType classType)
	{
		if (SpawnManager == null) return false;
		
		return classType switch
		{
			TrinityClassType.Tank => SpawnManager.TankCount < 1,
			TrinityClassType.Healer => SpawnManager.HealerCount < 2,
			TrinityClassType.DPS => SpawnManager.DPSCount < 2,
			_ => false
		};
	}
	
	void SelectClass(TrinityClassType classType)
	{
		if (!CanSelectClass(classType) || IsTransitioningOut)
		{
			Log.Warning($"Cannot select {classType} - role is full or already transitioning");
			return;
		}
		
		Log.Info($"Starting class selection: {classType}");
		IsTransitioningOut = true;
		StateHasChanged();
		
		Selector?.RequestClassSelection(classType);
	}
	
	protected override int BuildHash()
	{
		return HashCode.Combine(
			SpawnManager?.TankCount,
			SpawnManager?.HealerCount,
			SpawnManager?.DPSCount,
			IsTransitioningOut
		);
	}
}